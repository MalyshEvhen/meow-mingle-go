// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: comments.sql

package db

import (
	"context"
	"time"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (
    content, author_id, post_id
) VALUES (
    $1, $2, $3
) RETURNING id, content, author_id, post_id, created_at, updated_at
`

type CreateCommentParams struct {
	Content  string `json:"content" validate:"required"`
	AuthorID int64  `json:"author_id" validate:"required"`
	PostID   int64  `json:"post_id" validate:"required"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.Content, arg.AuthorID, arg.PostID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.AuthorID,
		&i.PostID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const getComment = `-- name: GetComment :one
SELECT
    c.id,
    c.author_id,
    c.content,
    c.created_at,
    c.updated_at,
    lc.count_likes
FROM comments c
LEFT JOIN (
    SELECT comment_id, COUNT(*) as count_likes
    FROM comment_likes
    GROUP BY comment_id
) lc ON c.id = lc.comment_id
WHERE c.id = $1 LIMIT 1
`

type GetCommentRow struct {
	ID         int64     `json:"id"`
	AuthorID   int64     `json:"author_id" validate:"required"`
	Content    string    `json:"content" validate:"required"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
	CountLikes int64     `json:"count_likes"`
}

func (q *Queries) GetComment(ctx context.Context, id int64) (GetCommentRow, error) {
	row := q.db.QueryRowContext(ctx, getComment, id)
	var i GetCommentRow
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CountLikes,
	)
	return i, err
}

const getCommentsAuthorID = `-- name: GetCommentsAuthorID :one
SELECT c.author_id
FROM comments c
WHERE c.id = $1 LIMIT 1
`

func (q *Queries) GetCommentsAuthorID(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCommentsAuthorID, id)
	var author_id int64
	err := row.Scan(&author_id)
	return author_id, err
}

const listPostComments = `-- name: ListPostComments :many
SELECT
    c.id,
    c.author_id,
    c.content,
    c.created_at,
    c.updated_at,
    lc.count_likes
FROM comments c
LEFT JOIN (
    SELECT comment_id, COUNT(*) as count_likes
    FROM comment_likes
    GROUP BY comment_id
) lc ON c.id = lc.comment_id
WHERE c.post_id = $1
ORDER BY c.id
`

type ListPostCommentsRow struct {
	ID         int64     `json:"id"`
	AuthorID   int64     `json:"author_id" validate:"required"`
	Content    string    `json:"content" validate:"required"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
	CountLikes int64     `json:"count_likes"`
}

func (q *Queries) ListPostComments(ctx context.Context, postID int64) ([]ListPostCommentsRow, error) {
	rows, err := q.db.QueryContext(ctx, listPostComments, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPostCommentsRow{}
	for rows.Next() {
		var i ListPostCommentsRow
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CountLikes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :one
UPDATE comments
SET content = $2
WHERE id = $1
RETURNING id, content, author_id, post_id, created_at, updated_at
`

type UpdateCommentParams struct {
	ID      int64  `json:"id"`
	Content string `json:"content" validate:"required"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, updateComment, arg.ID, arg.Content)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.AuthorID,
		&i.PostID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
