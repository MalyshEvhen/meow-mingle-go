// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: comment_likes.sql

package db

import (
	"context"
)

const createCommentLike = `-- name: CreateCommentLike :exec
INSERT INTO comment_likes (
    user_id, comment_id
) VALUES ($1, $2)
`

type CreateCommentLikeParams struct {
	UserID    int64 `json:"user_id"`
	CommentID int64 `json:"comment_id"`
}

func (q *Queries) CreateCommentLike(ctx context.Context, arg CreateCommentLikeParams) error {
	_, err := q.db.ExecContext(ctx, createCommentLike, arg.UserID, arg.CommentID)
	return err
}

const deleteCommentLike = `-- name: DeleteCommentLike :exec
DELETE FROM comment_likes
WHERE comment_id = $1 AND user_id = $2
`

type DeleteCommentLikeParams struct {
	CommentID int64 `json:"comment_id"`
	UserID    int64 `json:"user_id"`
}

func (q *Queries) DeleteCommentLike(ctx context.Context, arg DeleteCommentLikeParams) error {
	_, err := q.db.ExecContext(ctx, deleteCommentLike, arg.CommentID, arg.UserID)
	return err
}

const listCommentLikes = `-- name: ListCommentLikes :many
SELECT user_id, comment_id FROM comment_likes
WHERE comment_id = $1
`

func (q *Queries) ListCommentLikes(ctx context.Context, commentID int64) ([]CommentLike, error) {
	rows, err := q.db.QueryContext(ctx, listCommentLikes, commentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CommentLike{}
	for rows.Next() {
		var i CommentLike
		if err := rows.Scan(&i.UserID, &i.CommentID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
