// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: subscriptions.sql

package db

import (
	"context"
)

const createSubscription = `-- name: CreateSubscription :exec
INSERT INTO users_subscriptions (
    user_id, subscription_id
) VALUES ($1, $2)
`

type CreateSubscriptionParams struct {
	UserID         int64 `json:"user_id"`
	SubscriptionID int64 `json:"subscription_id"`
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) error {
	_, err := q.db.ExecContext(ctx, createSubscription, arg.UserID, arg.SubscriptionID)
	return err
}

const deleteSubscription = `-- name: DeleteSubscription :exec
DELETE FROM users_subscriptions
WHERE user_id = $1 AND subscription_id = $2
`

type DeleteSubscriptionParams struct {
	UserID         int64 `json:"user_id"`
	SubscriptionID int64 `json:"subscription_id"`
}

func (q *Queries) DeleteSubscription(ctx context.Context, arg DeleteSubscriptionParams) error {
	_, err := q.db.ExecContext(ctx, deleteSubscription, arg.UserID, arg.SubscriptionID)
	return err
}

const getSubscription = `-- name: GetSubscription :one
SELECT user_id, subscription_id FROM users_subscriptions
WHERE user_id = $1 AND subscription_id = $2
LIMIT 1
`

type GetSubscriptionParams struct {
	UserID         int64 `json:"user_id"`
	SubscriptionID int64 `json:"subscription_id"`
}

func (q *Queries) GetSubscription(ctx context.Context, arg GetSubscriptionParams) (UsersSubscription, error) {
	row := q.db.QueryRowContext(ctx, getSubscription, arg.UserID, arg.SubscriptionID)
	var i UsersSubscription
	err := row.Scan(&i.UserID, &i.SubscriptionID)
	return i, err
}

const listSubscriptions = `-- name: ListSubscriptions :many
SELECT subscription_id
FROM users_subscriptions
WHERE user_id = $1
`

func (q *Queries) ListSubscriptions(ctx context.Context, userID int64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, listSubscriptions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var subscription_id int64
		if err := rows.Scan(&subscription_id); err != nil {
			return nil, err
		}
		items = append(items, subscription_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
